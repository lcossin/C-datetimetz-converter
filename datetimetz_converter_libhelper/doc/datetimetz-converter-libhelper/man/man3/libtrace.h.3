.TH "include/libtrace.h" 3 "Sun Jul 26 2015" "datetimetz-converter-libhelper-0.5.1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/libtrace.h \- 
.PP
Provides some helper functions to handle trace messages\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTRACE_MESSAGE_MAXLENGTH\fP"
.br
.RI "\fITRACE MESSAGE maxlength\&. \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_NONE\fP"
.br
.RI "\fITRACE_LEVEL_NONE (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_NONE_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_CRITICAL\fP"
.br
.RI "\fITRACE_LEVEL_CRITICAL (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_CRITICAL_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_WARNING\fP"
.br
.RI "\fITRACE_LEVEL_WARNING (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_WARNING_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_INFO\fP"
.br
.RI "\fITRACE_LEVEL_INFO (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_INFO_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINE\fP"
.br
.RI "\fITRACE_LEVEL_FINE (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINE_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINER\fP"
.br
.RI "\fITRACE_LEVEL_FINER (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINER_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINEST\fP"
.br
.RI "\fITRACE_LEVEL_FINEST (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_FINEST_HEADER\fP"
.br
.ti -1c
.RI "#define \fBTRACE_LEVEL_DEBUG\fP"
.br
.RI "\fITRACE_LEVEL_DEBUG (constant) \fP"
.ti -1c
.RI "#define \fBTRACE_LEVEL_DEBUG_HEADER\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBlog_exit_critical\fP (const char *module, char *msg)"
.br
.RI "\fIwrites the given message depending on TRACE_LEVEL \fP"
.ti -1c
.RI "int \fBlog_critical\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'critical' level message\&. \fP"
.ti -1c
.RI "int \fBlog_warning\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'warning' level message\&. \fP"
.ti -1c
.RI "int \fBlog_info\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'info' level message\&. \fP"
.ti -1c
.RI "int \fBlog_fine\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'fine' level message\&. \fP"
.ti -1c
.RI "int \fBlog_finer\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'fine' level message\&. \fP"
.ti -1c
.RI "int \fBlog_finest\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'finest' level message\&. \fP"
.ti -1c
.RI "int \fBlog_debug\fP (const char *module, char *msg)"
.br
.RI "\fIWrites a 'debug' level message\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBTRACE_LEVEL\fP"
.br
.RI "\fITRACE_LEVEL (variable) \fP"
.in -1c
.SH "Detailed Description"
.PP 
Provides some helper functions to handle trace messages\&. 


.PP
\fBAuthor:\fP
.RS 4
Laurent Cossin 
.RE
.PP
\fBCopyright:\fP
.RS 4
GNU Lesser General Public License
.RE
.PP
\fBDate:\fP
.RS 4
July 2015 
.RE
.PP

.PP
Definition in file \fBlibtrace\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define TRACE_LEVEL_CRITICAL"

.PP
TRACE_LEVEL_CRITICAL (constant) 
.PP
Definition at line 46 of file libtrace\&.h\&.
.PP
Referenced by log_critical()\&.
.SS "#define TRACE_LEVEL_CRITICAL_HEADER"

.PP
Definition at line 47 of file libtrace\&.h\&.
.PP
Referenced by log_critical()\&.
.SS "#define TRACE_LEVEL_DEBUG"

.PP
TRACE_LEVEL_DEBUG (constant) 
.PP
Definition at line 70 of file libtrace\&.h\&.
.PP
Referenced by log_debug()\&.
.SS "#define TRACE_LEVEL_DEBUG_HEADER"

.PP
Definition at line 71 of file libtrace\&.h\&.
.PP
Referenced by log_debug()\&.
.SS "#define TRACE_LEVEL_FINE"

.PP
TRACE_LEVEL_FINE (constant) 
.PP
Definition at line 58 of file libtrace\&.h\&.
.PP
Referenced by log_fine()\&.
.SS "#define TRACE_LEVEL_FINE_HEADER"

.PP
Definition at line 59 of file libtrace\&.h\&.
.PP
Referenced by log_fine()\&.
.SS "#define TRACE_LEVEL_FINER"

.PP
TRACE_LEVEL_FINER (constant) 
.PP
Definition at line 62 of file libtrace\&.h\&.
.PP
Referenced by log_finer()\&.
.SS "#define TRACE_LEVEL_FINER_HEADER"

.PP
Definition at line 63 of file libtrace\&.h\&.
.PP
Referenced by log_finer()\&.
.SS "#define TRACE_LEVEL_FINEST"

.PP
TRACE_LEVEL_FINEST (constant) 
.PP
Definition at line 66 of file libtrace\&.h\&.
.PP
Referenced by log_finest()\&.
.SS "#define TRACE_LEVEL_FINEST_HEADER"

.PP
Definition at line 67 of file libtrace\&.h\&.
.PP
Referenced by log_finest()\&.
.SS "#define TRACE_LEVEL_INFO"

.PP
TRACE_LEVEL_INFO (constant) 
.PP
Definition at line 54 of file libtrace\&.h\&.
.PP
Referenced by log_info()\&.
.SS "#define TRACE_LEVEL_INFO_HEADER"

.PP
Definition at line 55 of file libtrace\&.h\&.
.PP
Referenced by log_info()\&.
.SS "#define TRACE_LEVEL_NONE"

.PP
TRACE_LEVEL_NONE (constant) 
.PP
Definition at line 42 of file libtrace\&.h\&.
.SS "#define TRACE_LEVEL_NONE_HEADER"

.PP
Definition at line 43 of file libtrace\&.h\&.
.SS "#define TRACE_LEVEL_WARNING"

.PP
TRACE_LEVEL_WARNING (constant) 
.PP
Definition at line 50 of file libtrace\&.h\&.
.PP
Referenced by log_warning()\&.
.SS "#define TRACE_LEVEL_WARNING_HEADER"

.PP
Definition at line 51 of file libtrace\&.h\&.
.PP
Referenced by log_warning()\&.
.SS "#define TRACE_MESSAGE_MAXLENGTH"

.PP
TRACE MESSAGE maxlength\&. 
.PP
Definition at line 39 of file libtrace\&.h\&.
.PP
Referenced by assert_pointer_is_not_null(), assert_string_is_not_null(), and regexp_verify()\&.
.SH "Function Documentation"
.PP 
.SS "int log_critical (const char *module, char *msg)"

.PP
Writes a 'critical' level message\&. 
.PP
Definition at line 81 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_CRITICAL, and TRACE_LEVEL_CRITICAL_HEADER\&.
.PP
Referenced by log_exit_critical()\&.
.SS "int log_debug (const char *module, char *msg)"

.PP
Writes a 'debug' level message\&. 
.PP
Definition at line 132 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_DEBUG, and TRACE_LEVEL_DEBUG_HEADER\&.
.PP
Referenced by assert_pointer_is_not_null(), assert_string_is_not_null(), parseRawString(), and regexp_verify()\&.
.SS "int log_exit_critical (const char *module, char *msg)"

.PP
writes the given message depending on TRACE_LEVEL Writes messages according to TRACE_LEVEL
.PP
input : msg - the message to be written
.PP
output stream : stderr (hard coded)Writes a 'critical' level message + aborts the program 
.PP
Definition at line 70 of file libtrace\&.c\&.
.PP
References actionOnFailureOpts, and log_critical()\&.
.PP
Referenced by assert_pointer_is_not_null(), and assert_string_is_not_null()\&.
.SS "int log_fine (const char *module, char *msg)"

.PP
Writes a 'fine' level message\&. 
.PP
Definition at line 105 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_FINE, and TRACE_LEVEL_FINE_HEADER\&.
.SS "int log_finer (const char *module, char *msg)"

.PP
Writes a 'fine' level message\&. 
.PP
Definition at line 114 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_FINER, and TRACE_LEVEL_FINER_HEADER\&.
.SS "int log_finest (const char *module, char *msg)"

.PP
Writes a 'finest' level message\&. 
.PP
Definition at line 123 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_FINEST, and TRACE_LEVEL_FINEST_HEADER\&.
.PP
Referenced by regexp_verify()\&.
.SS "int log_info (const char *module, char *msg)"

.PP
Writes a 'info' level message\&. 
.PP
Definition at line 97 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_INFO, and TRACE_LEVEL_INFO_HEADER\&.
.SS "int log_warning (const char *module, char *msg)"

.PP
Writes a 'warning' level message\&. 
.PP
Definition at line 89 of file libtrace\&.c\&.
.PP
References log_message(), TRACE_LEVEL_WARNING, and TRACE_LEVEL_WARNING_HEADER\&.
.SH "Variable Documentation"
.PP 
.SS "int TRACE_LEVEL"

.PP
TRACE_LEVEL (variable) 
.PP
Definition at line 29 of file libtrace\&.c\&.
.PP
Referenced by log_message()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for datetimetz-converter-libhelper-0\&.5\&.1 from the source code\&.
