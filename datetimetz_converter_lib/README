    Copyright (c) 2015 Laurent Cossin 
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU Free Documentation License"

Description
===========

The library libdatatimetz_converter provides functions to convert timestamps between timezones.

The libraries uses standard C functions and the TZ environment variable.

The functions are not thread safe because of the changes of TZ environment variable.

Common shared libraries
------------------------

The functions in the common libraries run the requested conversions.

The format of the input timestamp and the format of the output timestamp can be expressed as an integer (bits field) or as expression for strftime/strpfime.


Requirements
============

System requirements
-------------------

The source files do not use features that requires _GNU_SOURCE.

Build requirements
------------------

* project 'datetimetz-converter-libhelper'

* automake, autoconf, libtool, make
* Doxygen 1.8 and later

Requirements for tests (make check)
-----------------------------------

* dejagnu (for the tests)
* valgrind (for the tests) (OPTIONAL)

Verified on operating systems
-----------------------------

The shared libraries have been compiled, built and tested on :
* RedHat based-Enterprise Linux v7 x86_64
* Cygwin for Windows x64

Use the libraries and the test program
======================================

Use the common shared library
-----------------------------

Link the program to shared library named 'libdatetimetz_converter_lib.so'.

Full path : [install path]/lib/datetimetz-converter-lib/libdatetimetz_converter_lib.so

Source code
===========

Directory structure for the conversion libraries
------------------------------------------------

doc/
	documentation files (generated with Doxygen)

include/
	C header files of the libraries

src/
	C file of the libraries

tests/
	unit tests

Build the libraries
-------------------

$ ./configure --help

$ ./configure

$ make clean; make

Validate the libraries
----------------------

$ make check;

Build the distribution archives
-------------------------------

To rebuild the archive files.

$ make dist

Deploy to the target directory
--------------------------------

By default, the target root directory is '/usr/local/mytools/'.

Refer 'INSTALL' file to change the target directory.

$ make install

The files are installed in the following folders :

/usr/local/mytools/include/datetimetz-converter-lib
	

/usr/local/mytools/lib/datetimetz-converter-lib
	the shared libraries - a single .so file

Samples
============

Search for C files in the 'tests' subfolder.

The C files for test units give examples for using the convert functions.

Documentation
=============

How to generate the documentation
--------------------------

$ rm -rf doc/*datetimetz-converter* ;
$ make doxygen-doc;

How to display the documentation
--------------------------------

$ lynx doc/*datetimetz-converter*/html/index.html

Known limitations
==================

Does not handle timezones as offset '[+-]HHMM'
-----------------------------------------------

The convert routines cannot take a timezone given as an offset '[+-]HHMM'.

Feature not yet available.

Enforcing the timezone names
-----------------------------

The conversion functions do not enforce that the given timezones (input, output) exist in the zoneinfo database.

If TZ environment variable is set with an unknown timezone value, strptime does not return an error.

The return value is the timestamp in UTC timezone.

For input values, some tests  :
* take the input timestamp + the input timezone and convert to the same timezone
	expected result : the same timestamp
	strftime does not return the timezone, so it won't be possible to compare both timezone names, before and after the conversion
* the test above will failed for a timezone having the same offset as UTC

For output value, some tests :
* difficult, the timestamp matches UTC if the timezone is unknown

Another way for enforcing the timezone names :
* compare the timezone name against a reference list

